package db.mysql;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.List;
import java.util.Set;

import db.DBConnection;
import entity.Item;
import external.TicketMasterAPI;

public class MySQLConnection implements DBConnection {
	// Get the database connection
	private Connection connection;
	
	public MySQLConnection() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver").getConstructor().newInstance();
			connection = DriverManager.getConnection(MySQLDBUtil.URL);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void close() {
		if (connection != null) {
			try {
				connection.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void setFavoriteItems(String userId, List<String> itemIds) {
		if (connection == null) {
			System.err.println("Database connection failed");
			return;
		}
		// Add the user's item/event into the history table
		try {
			String sql = "INSERT IGNORE INTO history(user_id, item_id) VALUES (?, ?)";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			// <userId, itemId>
			preparedStatement.setString(1, userId);
			for (String itemId : itemIds) {
				preparedStatement.setString(2, itemId);
				preparedStatement.execute();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void unsetFavoriteItems(String userId, List<String> itemIds) {
		// TODO Auto-generated method stub

	}

	@Override
	public Set<String> getFavoriteItemIds(String userId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<Item> getFavoriteItems(String userId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<String> getCategories(String itemId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Item> searchItems(double lat, double lon, String term) {
		TicketMasterAPI ticketMasterAPI = new TicketMasterAPI();
	    List<Item> items = ticketMasterAPI.search(lat, lon, term);
	    for(Item item : items) {
	    	// Save each item to the database
	    	saveItem(item);
	    }
	    return items;
	}

	@Override
	public void saveItem(Item item) {
		if (connection == null) {
			System.err.println("Database connection failed");
			return;
		}
		// Use this specific trick to avoid SQL injection
		try {
			String sql = "INSERT IGNORE INTO items VALUES (?, ?, ?, ?, ?, ?, ?)";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, item.getItemId());
			preparedStatement.setString(2, item.getName());
			preparedStatement.setDouble(3, item.getRating());
			preparedStatement.setString(4, item.getAddress());
			preparedStatement.setString(5, item.getImageUrl());
			preparedStatement.setString(6, item.getUrl());
			preparedStatement.setDouble(7, item.getDistance());
			preparedStatement.execute();

			sql = "INSERT IGNORE INTO categories VALUES(?, ?)";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, item.getItemId());
			// An event may be classified into multiple categories
			for (String category : item.getCategories()) {
				preparedStatement.setString(2, category);
				preparedStatement.execute();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getFullname(String userId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean verifyLogin(String userId, String password) {
		// TODO Auto-generated method stub
		return false;
	}

}
